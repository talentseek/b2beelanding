generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  role          Role      @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean   @default(false)
  name          String?
  accounts      Account[]
  sessions      Session[]
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
}

model Bee {
  id           String        @id @default(cuid())
  slug         String        @unique
  name         String
  tagline      String?
  description  String?
  icon         String?
  features     Json?
  priceMonthly Int?
  isActive     Boolean       @default(true)
  ctaCalLink   String?
  sortOrder    Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bookings     Booking[]
  leads        Lead[]
  testimonials Testimonial[]
}

model Lead {
  id             String     @id @default(cuid())
  firstName      String
  lastName       String
  email          String
  company        String?
  notes          String?
  beeId          String?
  status         LeadStatus @default(NEW)
  consent        Boolean    @default(true)
  utmSource      String?
  utmMedium      String?
  utmCampaign    String?
  referrer       String?
  reminderSentAt DateTime? // Track when reminder email was sent
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  bookings       Booking[]
  bee            Bee?       @relation(fields: [beeId], references: [id])

  @@index([email])
  @@index([beeId, status])
  @@index([status, reminderSentAt])
}

model Booking {
  id         String        @id @default(cuid())
  provider   String        @default("calcom")
  providerId String?
  startTime  DateTime?
  endTime    DateTime?
  status     BookingStatus @default(PENDING)
  beeId      String?
  leadId     String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  bee        Bee?          @relation(fields: [beeId], references: [id])
  lead       Lead          @relation(fields: [leadId], references: [id])

  @@index([leadId, status])
}

model Testimonial {
  id        String   @id @default(cuid())
  author    String
  role      String?
  company   String?
  quote     String
  rating    Int?
  avatarUrl String?
  beeId     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bee       Bee?     @relation(fields: [beeId], references: [id])
}

enum Role {
  ADMIN
}

enum LeadStatus {
  NEW
  CONTACTED
  BOOKED
  NO_SHOW
  WON
  LOST
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  RESCHEDULED
}

model ABMPage {
  id                 String   @id @default(cuid())
  linkedinIdentifier String   @unique // e.g. "dbeer"
  linkedinUrl        String // Full LinkedIn URL
  firstName          String
  lastName           String
  title              String? // Job title
  company            String
  
  // Target market for simulation
  targetMarket       String // e.g. "Plumbers, Electricians and Carpenters"
  targetLocation     String // e.g. "Solihull, United Kingdom"
  
  // Simulation data (JSON)
  mockCompanies      Json? // Array of company names
  mockLeads          Json? // Array of lead objects {name, company, title}
  mockAnalytics      Json? // {replies, meetings, openRate, etc.}
  
  // Personalization
  heroMessage        String? // Custom hero message
  benefitPoints      Json? // Array of benefit strings
  
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([linkedinIdentifier])
  @@index([isActive])
}
